  
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Preguntas sobre simplificaci√≥n de expresiones matem√°ticas</title>
    <link rel="stylesheet" href="../../../../css/bootstrap.min.css">
    <link rel="stylesheet" href="../../../../style.css">
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<style>
    .imagen {
        max-width: 100%;
        height: auto;
    }
    .seccion {
    width: 50%; /* El 50% del ancho de la p√°gina menos el margen izquierdo */
    padding: 20px; /* importante este padding*/
    box-sizing: border-box;
    height: 255vh;
    }
</style>
 
<script>
function handleSubmit(event) {
    event.preventDefault();

    const formData = new FormData(event.target);

    fetch(event.target.action, {
        method: 'POST',
        body: formData
    })
    .then(response => response.text())
    .then(html => {
        document.body.innerHTML = html;

        // Aseg√∫rate de que MathJax procese el nuevo contenido
        if (window.MathJax) {
            MathJax.typeset();
        }
        actualizarFormula();
        actualizarFormula2();
        actualizarFormula3();
        actualizarFormula4();
        actualizarFormula5();
        actualizarFormula6();
        actualizarFormula7();
        actualizarFormula8();
        actualizarFormula9();
        actualizarFormula10();
        actualizarFormula11();
        actualizarFormula12();
      
    })
    .catch(error => {
        console.error('Error al enviar el formulario:', error);
    });
}

function actualizarFormula() {
    // Obtener los valores de los inputs
   
    var f = document.getElementById('respuesta_11').value || "";
 


    // Construir la f√≥rmula din√°mica
    var formula = ` \\  ${f} \\, `;

    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}
 

function actualizarFormula2() {
    // Obtener los valores de los inputs
   
    var f = document.getElementById('respuesta_13').value || "";
  
    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;

    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula2').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}



function actualizarFormula3() {
    // Obtener los valores de los inputs
   
    var f = document.getElementById('respuesta_27').value || "";
 


    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;

    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula3').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}

function actualizarFormula4() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_29').value || "";
   

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula4').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}


function actualizarFormula5() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_30').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula5').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}



function actualizarFormula6() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_6').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula6').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}


function actualizarFormula7() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_7').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula7').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}

function actualizarFormula8() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_8').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula8').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}


function actualizarFormula9() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_9').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula9').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}



function actualizarFormula10() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_10').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula10').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}


function actualizarFormula11() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_11').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula11').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}


function actualizarFormula12() {
    // Obtener los valores de los inputs
    var f = document.getElementById('respuesta_12').value || "";
  

    // Construir la f√≥rmula din√°mica
    var formula = ` \\ ${f}  \\, `;
    // Actualizar el contenido de la f√≥rmula en el DOM
    document.getElementById('formula12').innerHTML = `$$ ${formula} $$`;

    // Re-renderizar MathJax para mostrar los cambios
    if (window.MathJax) {
        MathJax.typeset();
    }
}

function mostrarMensaje() {
    document.getElementById("mensaje").style.display = 'block';
    // Aseg√∫rate de que MathJax procese el nuevo contenido
    MathJax.typeset([document.getElementById("mensaje")]);
}

function ocultarMensaje() {
    document.getElementById("mensaje").style.display = 'none';
}


function mostrarMensaje2() {
    document.getElementById("mensaje2").style.display = 'block';
    // Aseg√∫rate de que MathJax procese el nuevo contenido
    MathJax.typeset([document.getElementById("mensaje")]);
}

function ocultarMensaje2() {
    document.getElementById("mensaje2").style.display = 'none';
}



function mostrarMensaje3() {
    document.getElementById("mensaje3").style.display = 'block';
    // Aseg√∫rate de que MathJax procese el nuevo contenido
    MathJax.typeset([document.getElementById("mensaje3")]);
}

function ocultarMensaje3() {
    document.getElementById("mensaje3").style.display = 'none';
}

function mostrarMensaje4() {
    document.getElementById("mensaje4").style.display = 'block';
    // Aseg√∫rate de que MathJax procese el nuevo contenido
    MathJax.typeset([document.getElementById("mensaje4")]);
}

function ocultarMensaje4() {
    document.getElementById("mensaje4").style.display = 'none';
}




</script>
    
</head>
<body> 
<div class="seccion izquierda">
    <form action="./septimo.php" method="POST" onsubmit="handleSubmit(event)" autocomplete="off">
        <h3>üîπ Vista de Procesos (Process View)</h3>
<p>
La Vista de Procesos, tambi√©n conocida como el <strong>‚ÄúDiagrama de Actividades‚Äù</strong>, profundiza en los aspectos din√°micos del sistema. 
Describe el comportamiento del sistema y el flujo de control entre diversas actividades o procesos. 
Los diagramas de actividades son especialmente √∫tiles para ilustrar c√≥mo colaboran distintos componentes del sistema para cumplir tareas o casos de uso espec√≠ficos. 
Esta vista es crucial para comprender la secuencia de acciones e interacciones, siendo una herramienta esencial para dise√±adores y desarrolladores.
</p>

 

        <h3>üîπ Vista F√≠sica (Physical View)</h3>
<p>
La Vista F√≠sica, representada mediante el <strong>‚ÄúDiagrama de Despliegue‚Äù</strong>, ofrece una visi√≥n de c√≥mo se distribuyen los componentes de software en la infraestructura de hardware. 
Incluye detalles sobre servidores, nodos y sus interconexiones. 
Los diagramas de despliegue ayudan a abordar preguntas relacionadas con la escalabilidad, la tolerancia a fallos y la asignaci√≥n de recursos. 
Esta vista garantiza que la arquitectura del sistema se alinee con las restricciones y requerimientos del entorno f√≠sico de despliegue.
</p>


   <h3>üîπ Vista de Desarrollo (Development View)</h3>
<p>
La Vista de Desarrollo, tambi√©n llamada <strong>‚ÄúDiagrama de Componentes‚Äù</strong>, se centra en la organizaci√≥n de los componentes de software y sus relaciones dentro del entorno de desarrollo. 
Es fundamental para mapear la arquitectura del software con la implementaci√≥n real, facilitando que los equipos de desarrollo comprendan c√≥mo se distribuyen los m√≥dulos en el c√≥digo fuente. 
Esta vista ayuda a gestionar el proceso de desarrollo, asegurando que los componentes se desarrollen, prueben e integren de forma eficiente.
</p>

<h3>üîπ Vista de Casos de Uso (Use Case View)</h3>
<p>
La quinta vista del modelo ‚Äú4 + 1‚Äù es la <strong>Vista de Casos de Uso</strong>. 
Mientras que las otras cuatro vistas se centran en los aspectos internos del sistema, esta enfatiza la funcionalidad desde la perspectiva del usuario. 
Los diagramas de casos de uso muestran c√≥mo interact√∫an los usuarios con el sistema, ilustrando diversos escenarios y las respuestas correspondientes del sistema. 
Esta vista ayuda a definir y validar los requerimientos del sistema, asegurando que la arquitectura est√© alineada con las necesidades y expectativas del usuario final.
</p>

<h3> Beneficios del Modelo de Vistas ‚Äú4 + 1‚Äù</h3>
<ul>
  <li><strong>Claridad:</strong> Ofrece una forma clara y estructurada de visualizar y comunicar diferentes aspectos de la arquitectura del sistema.</li>
  <li><strong>Integralidad:</strong> Al dividir la arquitectura en cinco vistas distintas, asegura que se consideren todos los aspectos esenciales del sistema.</li>
  <li><strong>Alineaci√≥n:</strong> Ayuda a alinear la arquitectura t√©cnica con los requerimientos del usuario, asegurando que el sistema cumpla su prop√≥sito.</li>
  <li><strong>Facilidad de Comunicaci√≥n:</strong> Cada vista est√° dirigida a una audiencia espec√≠fica, facilitando la comunicaci√≥n de detalles t√©cnicos a diferentes tipos de stakeholders.</li>
  <li><strong>Eficiencia:</strong> Contribuye a un desarrollo m√°s eficiente, al proveer una hoja de ruta tanto para el dise√±o de alto nivel como para la implementaci√≥n detallada.</li>
</ul>

    <hr>


     <h2> ¬øPor qu√© se llama <i>4 + 1</i>?</h2>

  <p>
    El modelo <strong>4 + 1</strong> fue propuesto por <strong>Philippe Kruchten</strong> en 1995 para describir arquitecturas de software usando diferentes puntos de vista. Su nombre proviene del hecho de que se compone de <strong>cuatro vistas principales</strong> m√°s <strong>una vista adicional</strong> que las integra y valida.
  </p>

  <h3>üîπ Las "4" vistas principales</h3>
  <ul>
    <li><strong>Logical View</strong> : describe la funcionalidad del sistema desde el punto de vista del dise√±ador. <br> <em>Ejemplo:</em> Diagrama de clases UML.</li>
    <li><strong>Process View</strong> : muestra el comportamiento en tiempo de ejecuci√≥n, concurrencia e hilos. <br> <em>Ejemplo:</em> Diagramas de actividad o secuencia.</li>
    <li><strong>Development View</strong> : estructura del software desde el punto de vista del programador. <br> <em>Ejemplo:</em> Diagrama de componentes, estructura de paquetes.</li>
    <li><strong>Physical View</strong> : representaci√≥n del despliegue en la infraestructura f√≠sica. <br> <em>Ejemplo:</em> Diagrama de nodos UML, topolog√≠a de red.</li>
  </ul>

  <h3> La vista "+1": Use Case View (Vista de Escenarios)</h3>
  <p>
    La <strong>Use Case View</strong> muestra c√≥mo los usuarios interact√∫an con el sistema. Se centra en los casos de uso para capturar los <strong>requerimientos funcionales</strong> y verificar que las otras vistas den soporte a las funciones esperadas del sistema.
    <br><em>Ejemplo:</em> Diagrama de casos de uso UML.
  </p>

  <h3> Utilidad del modelo 4 + 1</h3>
  <ul>
    <li> Permite representar diferentes aspectos del sistema de forma organizada.</li>
    <li> Facilita la comunicaci√≥n entre distintos tipos de stakeholders (usuarios, desarrolladores, arquitectos, etc.).</li>
    <li> Asegura que los requerimientos del usuario se reflejan adecuadamente en el dise√±o.</li>
    <li> Promueve la validaci√≥n cruzada de vistas usando escenarios reales.</li>
  </ul>


    </form>
</div>




<div class="seccion derecha">
    <form action="./septimo.php" method="POST" onsubmit="handleSubmit(event)" autocomplete="off">
    <h3> Modelo de Vistas 4+1 (4+1 View Model)</h3>

    <p>
    El modelo <strong>4+1</strong> es un modelo de vistas utilizado para <em>"describir la arquitectura 
    de sistemas intensivos en software, basado en el uso de m√∫ltiples vistas concurrentes"</em> [1]. 
    Las vistas se emplean para describir el sistema desde el punto de vista de distintos <em>stakeholders</em>,
    como usuarios finales, desarrolladores, ingenieros de sistemas y gestores de proyecto.
    </p>

    <p>
    Las cuatro vistas del modelo son: l√≥gica, de desarrollo, de procesos y f√≠sica. Adem√°s, se utilizan casos de uso o escenarios seleccionados para ilustrar la arquitectura, sirviendo como la vista ‚Äúm√°s uno‚Äù (<strong>+1</strong>). 
    Por tanto, el modelo contiene <strong>4+1 vistas</strong> [1]:
    </p>

    <h3> Vista L√≥gica (Logical View)</h3>
    <p>
    Se enfoca en la funcionalidad que el sistema ofrece a los usuarios finales. 
    Se representa mediante diagramas UML como los diagramas de clases y de estados [2].
    </p>

    <h3> Vista de Procesos (Process View)</h3>
    <p>
    Trata los aspectos din√°micos del sistema: c√≥mo se ejecutan los procesos, c√≥mo se comunican y c√≥mo se comporta el sistema en tiempo de ejecuci√≥n. 
    Aborda temas como concurrencia, distribuci√≥n, rendimiento y escalabilidad. 
    Diagramas UML usados incluyen diagramas de secuencia, de comunicaci√≥n y de actividades [2][3].
    </p>

    <h3> Vista de Desarrollo (Development View)</h3>
    <p>
    Tambi√©n llamada vista de implementaci√≥n. Muestra el sistema desde la perspectiva del programador y se centra en la gesti√≥n del software. 
    Se representa con diagramas UML como el diagrama de componentes y el diagrama de paquetes [2].
    </p>

    <h3> Vista F√≠sica (Physical View)</h3>
    <p>
    Tambi√©n conocida como vista de despliegue. Representa el sistema desde el punto de vista del ingeniero de sistemas, enfoc√°ndose en c√≥mo se despliegan los componentes de software en el hardware. 
    Utiliza el diagrama de despliegue UML para representar servidores, nodos y conexiones f√≠sicas entre ellos [2].
    </p>

    <h3> Escenarios o Casos de Uso (Scenarios / Use Case View)</h3>
    <p>
    Esta vista adicional utiliza un conjunto de casos de uso o escenarios que ilustran la arquitectura. 
    Muestra secuencias de interacci√≥n entre objetos y procesos para validar la arquitectura y detectar elementos clave. 
    Tambi√©n sirve como punto de partida para las pruebas de prototipos de arquitectura.
    </p>

    <h3> Ventajas del Modelo 4+1</h3>
    <ul>
    <li><strong>Claridad:</strong> Ofrece una forma estructurada de visualizar y comunicar la arquitectura del sistema.</li>
    <li><strong>Integralidad:</strong> Abarca todos los aspectos esenciales del sistema al dividirlo en cinco vistas.</li>
    <li><strong>Alineaci√≥n:</strong> Ayuda a alinear la arquitectura t√©cnica con los requerimientos del usuario.</li>
    <li><strong>Comunicaci√≥n efectiva:</strong> Cada vista est√° orientada a un tipo distinto de audiencia.</li>
    <li><strong>Eficiencia:</strong> Sirve como gu√≠a tanto para el dise√±o de alto nivel como para la implementaci√≥n detallada.</li>
    </ul>

    <p>
    El modelo 4+1 es gen√©rico y no est√° restringido a ning√∫n lenguaje de notaci√≥n, herramienta o m√©todo de dise√±o en particular. 
    Como dijo Philippe Kruchten:
    </p>

    <blockquote>
    ‚ÄúEl modelo de vistas ‚Äò4+1‚Äô es bastante gen√©rico: se pueden usar otras notaciones y herramientas, as√≠ como otros m√©todos de dise√±o, especialmente para las descomposiciones l√≥gica y de procesos, aunque aqu√≠ hemos indicado las que hemos usado con √©xito.‚Äù
    </blockquote>

    <p><strong>‚Äî Philippe Kruchten, <em>Architectural Blueprints‚ÄîThe ‚Äú4+1‚Äù View Model of Software Architecture</em> [1]</strong></p>











      <h2> El contexto del modelo de vistas ‚Äú4 + 1‚Äù para la arquitectura de sistemas</h2>

  <p>
    En el contexto del modelo de vistas <strong>"4 + 1"</strong> para la arquitectura de sistemas, existen diferentes tipos de diagramas UML asociados a las distintas vistas. 
    A continuaci√≥n, se presenta una tabla que enumera cada una de las vistas <strong>"4 + 1"</strong> y sus diagramas UML correspondientes:
  </p>

  <table>
    <thead>
      <tr>
        <th>üîπ Ver nombre</th>
        <th>üìä Diagramas UML correspondientes</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Vista l√≥gica</td>
        <td>
          Diagrama de clases, diagrama de objetos, diagrama de componentes, 
          diagrama de paquetes, diagrama de estructura compuesta
        </td>
      </tr>
      <tr>
        <td>Vista de proceso</td>
        <td>
          Diagrama de actividad, diagrama de m√°quina de estados, 
          diagrama de secuencia, diagrama de tiempo, 
          diagrama de descripci√≥n general de interacci√≥n
        </td>
      </tr>
      <tr>
        <td>Vista f√≠sica</td>
        <td>Diagrama de implementaci√≥n</td>
      </tr>
      <tr>
        <td>Vista de desarrollo</td>
        <td>Diagrama de componentes, diagrama de paquete</td>
      </tr>
      <tr>
        <td>Vista de caso de uso</td>
        <td>Diagrama de casos de uso</td>
      </tr>
    </tbody>
  </table>

  <p>
    Cada vista abarca uno o m√°s diagramas UML que se utilizan para representar diferentes aspectos de la arquitectura del sistema, proporcionando una comprensi√≥n completa y equilibrada del sistema.
  </p>

    </form>
</div>

<div class="centered-container">
    <a 
        name="siguiente" 
        id="siguiente"
        class="btn btn-primary"
        href="septimo.php"
        role="button"
        width="50px"
        height="50px"
    >Siguiente</a>
</div>
</body>
</html>
